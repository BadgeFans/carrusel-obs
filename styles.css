<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carrusel Vertical</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="carousel-wrapper">
        <div class="carousel-track" id="carousel-track">
            <!-- Los items se cargarán automáticamente desde el CMS -->
        </div>
    </div>
    
    <script src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script>
    <script>
        // Función para calcular tiempo restante completo
        function getTimeRemaining(endDateStr) {
            try {
                const parts = endDateStr.trim().split(' ');
                const dateParts = parts[0].split('/');
                
                let hours = 23, minutes = 59;
                if (parts.length > 1) {
                    const timeParts = parts[1].split(':');
                    hours = parseInt(timeParts[0]) || 23;
                    minutes = parseInt(timeParts[1]) || 59;
                }
                
                const endDate = new Date(
                    parseInt(dateParts[2]),
                    parseInt(dateParts[1]) - 1,
                    parseInt(dateParts[0]),
                    hours,
                    minutes,
                    0
                );
                
                const now = new Date();
                const diff = endDate - now;
                
                if (diff <= 0) return null;
                
                const days = Math.floor(diff / (1000 * 60 * 60 * 24));
                const hoursLeft = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutesLeft = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                const secondsLeft = Math.floor((diff % (1000 * 60)) / 1000);
                
                if (days > 0) {
                    return `${days}d ${hoursLeft}h ${minutesLeft}m remaining`;
                } else {
                    return `${hoursLeft}h ${minutesLeft}m ${secondsLeft}s remaining`;
                }
            } catch (e) {
                console.error('Error parsing date:', e);
                return null;
            }
        }
        
        // Cargar items desde el CMS
        async function loadCarouselItems() {
            try {
                const response = await fetch('https://api.github.com/repos/BadgeFans/carrusel-obs/contents/content/carousel');
                const files = await response.json();
                
                const track = document.getElementById('carousel-track');
                const items = [];
                
                for (const file of files) {
                    const fileResponse = await fetch(file.download_url);
                    const fileContent = await fileResponse.text();
                    
                    const match = fileContent.match(/---\n([\s\S]*?)\n---/);
                    if (match) {
                        const frontmatter = match[1];
                        const item = { order: 999 };
                        
                        frontmatter.split('\n').forEach(line => {
                            const colonIndex = line.indexOf(':');
                            if (colonIndex > -1) {
                                const key
